AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys an Amazon MQ broker into a new VPC with 2 public subnets.
Parameters:
  BrokerUsername:
    Type: String
    Default: BrokerUsername
    Description: The name of the Amazon MQ broker user.

  BrokerPassword:
    NoEcho: true
    Type: String
    Default: BrokerPassword
    Description: The password of the Amazon MQ broker user.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.11.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Join [ ':', [ !Ref 'AWS::StackName', 'VPC' ] ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ ':', [ !Ref 'AWS::StackName', 'InternetGateway' ] ]

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ ':', [ !Ref 'AWS::StackName', 'RouteTable' ] ]

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.11.0.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet1' ] ]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.11.1.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet2' ] ]

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  JmsBridgeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group ingress and egress traffic for the JMS bridge
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 8162
        ToPort: 8162
        SourceSecurityGroupId: !Ref IBMMQSecurityGroup

  IBMMQSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group ingress and egress traffic for the WebSphere MQ instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 9443
        ToPort: 9443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 1414
        ToPort: 1414
        CidrIp: 0.0.0.0/0

  AmazonMQSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group ingress and egress traffic for the Amazon MQ instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8162
        ToPort: 8162
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 61617
        ToPort: 61617
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 5671
        ToPort: 5671
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 61614
        ToPort: 61614
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8883
        ToPort: 8883
        CidrIp: 0.0.0.0/0

  # AmazonMQBroker:
  #   Type: AWS::AmazonMQ::Broker
  #   Properties: 
  #     AutoMinorVersionUpgrade: false
  #     BrokerName: DemoAmazonMQBroker
  #     DeploymentMode: ACTIVE_STANDBY_MULTI_AZ
  #     EngineType: ActiveMQ
  #     EngineVersion: 5.15.0
  #     HostInstanceType: mq.m5.large
  #     Logs:
  #       General: true
  #       Audit: true
  #     PubliclyAccessible: true
  #     SecurityGroups:
  #       - !Ref AmazonMQSecurityGroup
  #     SubnetIds:
  #       - !Ref PublicSubnet1
  #       - !Ref PublicSubnet2
  #     Users: 
  #       - 
  #         ConsoleAccess: true
  #         Groups: 
  #           - Admin
  #         Password: 
  #           Ref: BrokerPassword
  #         Username: 
  #           Ref: BrokerUsername

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  IBMMQECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ibm-mq-cluster

  IBMMQECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ibm-mq-broker-task
      Cpu: 1024
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: mqadvanced-server-dev
          Cpu: 1024
          Memory: 2048
          Image: !Join [ '', [ !Ref 'AWS::AccountId', '.dkr.ecr.', !Ref 'AWS::Region', '.amazonaws.com/amazon-mq-to-websphere-mq-bridge/mqadvanced-server-dev:latest' ] ]
          PortMappings:
            - ContainerPort: 1414
            - ContainerPort: 9443
          Environment:
          - Name: LICENSE
            Value: accept
          - Name: MQ_QMGR_NAME
            Value: QMGR

  IBMMQECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: ibm-mq-broker-service
      Cluster: !Ref IBMMQECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref IBMMQSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      TaskDefinition: !Ref IBMMQECSTaskDefinition

Outputs:
  IBMMQConsole:
    Description: The console url for our IBM MQ broker.
    Value: !Join [ '', [ 'https://', !Ref 'AWS::AccountId', ':9443/ibmmq/console/login.html' ] ]

#   AmazonMQBrokerRef:
#     Description: The ref of the Amazon MQ broker
#     Value: !Ref AmazonMQBroker

#  AmazonMQBrokerConfigurationId:
#    Description: The configuration id of the Amazon MQ broker
#    Value: !GetAtt AmazonMQBroker.ConfigurationId

#  AmazonMQBrokerArn:
#    Description: The arn of the Amazon MQ broker
#    Value: !GetAtt AmazonMQBroker.Arn
#    Export:
#      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'AmazonMQBrokerName' ] ]